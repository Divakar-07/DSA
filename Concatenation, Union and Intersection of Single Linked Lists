// L -11  Concatenation, Union and Intersection of Single Linked Lists
// ðŸ˜Ž 1.
       struct node {
    int data;
    struct node *next;
};
typedef struct node *NODE;
NODE createAndAddNodes(NODE first) {
    int data;
    NODE temp,last;
    while(1){
        printf("Enter element : ");
        scanf("%d",&data);
        if(data ==-1){
            break;
        }
    
        temp = (NODE)malloc(sizeof(struct node));
        temp->data =data;
        temp->next=NULL;
        if(first == NULL){
            first = temp;
            last = temp;
        }else{
            last->next =temp;
            last =temp;
        }
    }
    return first;
      
}
NODE concatenate(NODE t1, NODE t2) {
    if(t1 ==NULL){
        return t2;
    }
    if(t2 ==NULL){
        return t1;
    }
    NODE temp = t1;
    while (temp->next != NULL){
        temp = temp->next;
    }
   temp->next =t2;
    return t1;
}
void print(NODE first) {
    NODE q = first;
    if (first == NULL) {
        printf("Single Linked List is empty\n");
    } else {
        while (q != NULL) {
            printf("%d---> ", q->data);
            q = q->next;
        }
        printf("NULL\n");
    }
}

ðŸ˜Ž  2.
struct node {
    int data;
    struct node *next;
};
typedef struct node *NODE;
NODE createAndAddNodes(NODE first) {
    NODE temp, q;
    int x;
    printf("Enter element : ");
    scanf("%d", &x);
    while(x != -1) {
        temp = (NODE)malloc(sizeof(struct node));
        temp->data = x;
        temp->next = NULL;
        if(first == NULL) {
            first = temp;
        } else {
            q->next = temp;
        }
        q = temp;
        printf("Enter element : ");
        scanf("%d", &x);
    }
    return first;  
}
void print(NODE first) {
    NODE q = first;
    int isDuplicate =0;
    
    if (first == NULL) {
        printf("Single Linked List is empty\n");
        return;
    }
        printf("Elements in the list are : ");
        while (q != NULL) {
            NODE temp = first;
            isDuplicate =0;
            while(temp != q){
                if(temp ->data == q->data){
                    isDuplicate =1;
                                        break;
                }
                temp = temp->next;
            }
            if(!isDuplicate){
            printf("%d---> ", q->data);
            }
            q = q->next;
        }
        printf("NULL\n");
    }
NODE concatenate(NODE t1, NODE t2) {
    if(t1 == NULL){
        return t2;
    }
    if(t2 == NULL){
        return t1;
    }
    NODE temp = t1;
    while (temp->next!=NULL){
        temp =temp->next;
    }
    temp->next=t2;
    return t1;
NODE unionSLL(NODE l1, NODE l2) {
    NODE result = NULL;
    NODE temp,last;
    while (l1 != NULL){
        temp = (NODE)malloc(sizeof(struct node));
        temp->data =l1->data;
        temp->next=NULL;
        
        if(result == NULL){
            result = temp;
            last = temp;
        }else{
            last->next = temp;
            last= temp;
                    }
        l1=l1->next;
    }
    while (l2 != NULL){
        NODE current = result;
        int duplicate =0;
        while (current!=NULL){
            if(current->data == l2->data){
                duplicate =1;
                break;
            }
            current =current->next;
        }
        if(!duplicate){
        temp =(NODE)malloc(sizeof(struct node));
        temp->data =l2->data;
        temp->next=NULL;
        
        if(result == NULL){
            result =temp;
            last=temp;
        }else{
            last->next =temp;
            last = temp;
        }
    }
    l2=l2->next;
  return result;
  }
  // ðŸ˜Ž 3.
  struct node {
    int data;
    struct node *next;
};
typedef struct node * NODE;
NODE createAndAddNodes(NODE first) {
    NODE temp, q;
    int x;
    printf("Enter element : ");
    scanf("%d", &x);
    while(x != -1) {
        temp = (NODE)malloc(sizeof(struct node));
        temp->data = x;
        temp->next = NULL;
        if(first == NULL) {
            first = temp;
        } else {
            q->next = temp;
        }
        q = temp;
        printf("Enter element : ");
        scanf("%d", &x);
    }
    return first;  
}
NODE sort(NODE first) {
    // Write the code
    if(first == NULL || first->next == NULL){
        return first;
    }
    int swapped;
    NODE ptr1;
    NODE lptr = NULL;
    do{
        swapped=0;
        ptr1 =first;
        while (ptr1->next != lptr){
            if(ptr1->data> ptr1->next->data){
                int temp =ptr1->data;
                ptr1->data=ptr1->next->data;
                ptr1->next->data=temp;
                swapped =1;
            }
            ptr1=ptr1->next;
        }
        lptr =ptr1;
    }while(swapped);
    return first;
}
NODE add(NODE l3,int x) {
    
    // Write the code
    NODE temp =(NODE)malloc(sizeof(struct node));
    temp->data=x;
    temp->next =NULL;
    if(l3 == NULL){
        l3=temp;
    }else{
        NODE ptr =l3;
        while(ptr->next!=NULL){
            ptr =ptr->next;
        }
        ptr->next =temp;
    }
    return l3;
}
NODE intersectionSLL(NODE l1,NODE l2) {
    // Write the code
    NODE result =NULL;
    while (l1!=NULL && l2!=NULL){
        if(l1->data == l2->data){
            result = add(result,l1->data);
            l1=l1->next;
            l2=l2->next;
        }else if(l1->data<l2->data){
            l1=l1->next;
        }else{
            l2=l2->next;
        }
    }
    return result;
}
void print(NODE first) {
    NODE q = first;
    if (first == NULL) {
        printf("Single Linked List is empty\n");
    } else {
        printf("Elements in the list are : ");
        while (q != NULL) {
            printf("%d---> ", q -> data);
            q = q -> next;
        }
        printf("NULL\n");
    }
}
